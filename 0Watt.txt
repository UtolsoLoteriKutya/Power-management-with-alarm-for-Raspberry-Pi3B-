- rtcctl
- rc.local time sync
- power led config
- cron - hourly sync

- power button polling program

- power led wire
- 3.3 ext
- Tiny
- RTC 

This page describe an extension to the new kind of Raspberry Pi's to achive "PC-kind" power management. The benefits of it:

	-	Fully functioned power button
	-	Achiveing the board's low power construction feature
	-	additional RTC	
	-	programmable wake up

Applicable boards as it is (tested):
	
	-	Raspberry Pi3 b+
	-	Raspberry Pi4

Probably applicable with some modification (check the descripton in the end of the page):

	-	More older boards

What hardwares do you need next to the Rpi:

	-	Attiny 13 + programmer + IDE
	-	few discrete components (take a look to the schematics)
	-	DS3231 IC with ext componens or complete module

Background

As many of us experienced, the Raspberry pi's are very versatible small computers with a lot of advantages and few drawbacks. One of the few ones -however depending the field of use-  is the lack of power management possibilities. Since the enhanced version of the Pi3 has been introduced to the market (Pi3 B+) the creators let the possibility for the users to disable the internal regulators to save up energy. This extended uC controlled unit handles it with some extended feature.

Block diagram & description.

The 0 Watt PCB contains the few neccesary parts what the project needs. The Attiny13 uC senses the actual state of the Raspberry via the Power LED. (The led should be off when the rpi works - it's configurable by the config.txt) If the Power led is off it means for the uC that the system is working. When you shut it down by command/click/gpio the red led starts to light again. It means that after a certain amount of time (~ half minute) the regulators can be switched off (the Tiny pulls down the PEN connector) because the raspbian turned off the computer safely. 

The power on process is initialized by the DS module's SQW pin or manually with the power button. When it happens the Tiny releases the PEN pin, and waits (~ half minute) for LED's switched down state. (If it fails for some reason it make the rpi fall back to sleep mode)

The power button has got two function. One is to manually generate an interrupt to wake up the system, the other is to create a signal for the Rpi (via the GPIO) to shut down if it's pressed during the on state.

Hw construction.

A sample schematic and PCB layout have been provided. The 3v3 regulator is needed to give power for the uC and the RTC, becuase the rpi's one is in shutdown mode when it sleeps. It's possible to skip the regulator and make the devices work from 5V directly, but in this case the level shift issue should be handled on the i2c bus. The MOSFET converts the voltage level from 1.8V to the uC's supply voltage, and also inverts the state. The signal's wire should be soldered to the PP10 point of the Rpi of which located on the down side, close to the leds. The diodes prevents to "mix" the Rpi and the boards 3,3Volt voltages. The Attiny13's hex file are provided, and also the source code, so you can modify by your own if there is a need to change the behaviour of it.

Sw modifications.

These steps have to be constructed:

	1.	Replacing the hwclock to the rtcctl because the original one doesn't make ability to set the alarm.
	2.	To make the power led off when it boots.
	3.	Polling the power button.


1. Rtcctl install and config.

The RTCCTL is a very smart application made by XY. You can download and install here from the Github. The site mentions and i would like to emphasize too that you have to comment the dtoverlay=i2chardwareclock line in the config.txt, to "free up" the hardware for this new program.

Syncing the system time to the DS's clock. Hence there is no hwclock, and this function is not automated in the rtcctl, it's advised to run it once at every boot procedure like adding a line to the rc.local. Due to the DS3231's behaviour, you have to manually clear the alarm register after it happened. It's also nice to handle it at boot. So the rc.local looks like this one:


If there is more accurate time source like NTP,GPS,DCF77 in the system, it's advised to periodically sync the DS's clock to the system time. The easyest way to add a line to the /etc/crontab file like here, where it synchronizes at every :13 minutes of a hour.



2. Switching off the LED

It can be done by adding these two lines to the /etc/boot/config.txt:

3. Polling the power button

There is a way to do it by the os (also enabling it in the config.txt) or making an own program / integrate it to your main one. I have choosen the second option, because with it i can also demonstatrate an exmaple for the alarm setting. Here is my sample code.


Additional notes:

-	The whole current flowing in the Vin(5V) is only ~12-14mA in sleep state. It's advised to use low quiescent current LDO models.

-	The older RPi's dont have PEN pin to reduce the power consumption, but you can manually contstruct it by adding a series P-FET to the 5V main supply line. It's more than sure that your "eco feet" will be less than ever. Some of the very old boards like "Pi1 B" doesn't support power led turn off, so it can cause a kind of challenge to get the system on state.

-	The Rpi4 is even more smart regarding these topic than the 3B+. Theoretically it can switch down it's regulators by it's own, and no need these extension (unless you want alarm function). It can be enabled somewehre it's EEPROM, but it haven tested it due to the lack of my knowledge. What is sure, that the still PEN works on it with the same effect of the previous model.